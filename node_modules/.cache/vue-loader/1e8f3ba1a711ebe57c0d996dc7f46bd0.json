{"remainingRequest":"F:\\vscode\\gocode\\cloudMusic\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\vscode\\gocode\\cloudMusic\\src\\components\\common\\tabbar\\tabbaritem.vue?vue&type=style&index=0&id=0920a6a4&scoped=true&lang=css&","dependencies":[{"path":"F:\\vscode\\gocode\\cloudMusic\\src\\components\\common\\tabbar\\tabbaritem.vue","mtime":1605347186000},{"path":"F:\\vscode\\gocode\\cloudMusic\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\vscode\\gocode\\cloudMusic\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"F:\\vscode\\gocode\\cloudMusic\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"F:\\vscode\\gocode\\cloudMusic\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\vscode\\gocode\\cloudMusic\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRhYi1iYXItaXRlbXsKICAgIC8qIGZsZXgg5Li6IDEg55qE5pe25YCZ5Lya6Ieq5Yqo5YiG6YWN5a695bqmICovCiAgICBmbGV4OiAxOwogICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgLyog56e75Yqo56uvdGFiYmFy6buY6K6k6auY5bqm5pivNDkgKi8KICAgIGhlaWdodDogNDlweDsKICAgIGZvbnQtc2l6ZTogMTNweDsKfQoudGFiLWJhci1pdGVtIGltZ3sKICAgIHdpZHRoOiAuNjY1Nzc5cmVtOwogICAgaGVpZ2h0OiAuNjY1Nzc5cmVtOwogICAgbWFyZ2luLXRvcDogLjA3OTg5M3JlbTsKICAgIC8qIOWOu+mZpOWbvueJh+S4i+mdoum7mOiupOeahCAzIHB4ICovCiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwp9Ci5hY3RpdmVTaXplewogICAgY29sb3I6IHJlZDsKfQo="},{"version":3,"sources":["tabbaritem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tabbaritem.vue","sourceRoot":"src/components/common/tabbar","sourcesContent":["<template>\n<!-- 导航栏的内容组件 -->\n    <div class=\"tab-bar-item\" @click='isShow'>\n        <!-- 在每一个小组件中定义两个插槽 -->\n        <!-- 通过name属性 将指定内容放入指定的插槽当中 -->\n        <!-- 通过v-if v-else 指令来决定 显示哪张图标 -->\n        <slot v-if='!isActive' name='item-icon'></slot>\n        <!-- 这个插槽用于放入获取状态的图标 -->\n        <slot v-else name='item-icon-active'></slot>\n        <div :style=\"styleColor\"><slot name='item-text'></slot></div>\n        <!-- <img src=\"../../assets/img/index.png\" alt=\"\">\n        <div>首页</div> -->\n    </div>\n</template>\n\n<script>\nexport default {\n    name:'tabbaritem',\n    props: {\n        // 指定 path 属性的值是 字符串类型\n        path: String,\n        activeColor: {\n            // 指定默认类型为 字符串\n            type: String,\n            // 如果不传递参数默认 red\n            default: 'red'\n        }\n    },\n    data () {\n        return {\n            // isActive:true\n        }\n    },\n    // 计算属性\n    computed: {\n        isActive(){\n            // 只有当前活跃状态下的 组件 才有 $route 属性\n            // 检查活跃组件的 path 是否 indexOf(包含) this.path\n            // !== -1 表示包含\n            return this.$route.path.indexOf(this.path) !== -1\n        },\n        // 根据传入的参数觉得字体颜色\n        styleColor(){\n            // this.isActive 当前处于活跃状态下\n            // 三元运算符进行判断\n            return this.isActive ? {color: this.activeColor} : {}\n        }\n    },\n    methods: {\n        isShow(){\n            // console.log(this.$router);\n            // replace替换   push增加\n            // 添加 .catch(()=>{})  解决重复点击报错的问题\n            this.$router.replace(this.path).catch(()=>{})\n        }\n    }\n}\n</script>\n\n<style scoped>\n    .tab-bar-item{\n        /* flex 为 1 的时候会自动分配宽度 */\n        flex: 1;\n        text-align: center;\n        /* 移动端tabbar默认高度是49 */\n        height: 49px;\n        font-size: 13px;\n    }\n    .tab-bar-item img{\n        width: .665779rem;\n        height: .665779rem;\n        margin-top: .079893rem;\n        /* 去除图片下面默认的 3 px */\n        vertical-align: middle;\n    }\n    .activeSize{\n        color: red;\n    }\n</style>"]}]}